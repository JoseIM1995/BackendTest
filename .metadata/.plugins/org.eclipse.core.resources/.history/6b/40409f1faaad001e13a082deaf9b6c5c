package com.test.application.service;

import java.util.Calendar;
import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.test.application.entity.Employee;
import com.test.application.entity.Gender;
import com.test.application.entity.Job;
import com.test.application.repository.EmployeeRepository;
import com.test.application.repository.GenderRepository;
import com.test.application.repository.JobRepository;
import com.test.application.request.EmployeeRequest;
import com.test.application.response.EmployeeResponse;

@Service
public class EmployeeService {
	@Autowired
    private EmployeeRepository employeeRepository;

    @Autowired
    private GenderRepository genderRepository;

    @Autowired
    private JobRepository jobRepository;

    public EmployeeResponse addEmployee(EmployeeRequest request) {
        EmployeeResponse response = new EmployeeResponse();

        // Validar que el género y el puesto existan
        Optional<Gender> genderOptional = genderRepository.findById(request.getGenderId());
        Optional<Job> jobOptional = jobRepository.findById(request.getJobId());

        if (genderOptional.isPresent() && jobOptional.isPresent()) {
            // Validar que el nombre y apellido no existan
            if (!employeeRepository.existsByNameAndLastName(request.getName(), request.getLastName())) {
                // Validar que el empleado sea mayor de edad
                Date currentDate = new Date();
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(currentDate);
                calendar.add(Calendar.YEAR, -18);
                Date eighteenYearsAgo = calendar.getTime();

                if (request.getBirthdate().before(eighteenYearsAgo)) {
                    // Crear y guardar el nuevo empleado
                    Employee employee = new Employee();
                    employee.setGender(genderOptional.get());
                    employee.setJob(jobOptional.get());
                    employee.setName(request.getName());
                    employee.setLastName(request.getLastName());
                    employee.setBirthdate(request.getBirthdate());

                    Employee savedEmployee = employeeRepository.save(employee);

                    response.setId(savedEmployee.getId());
                    response.setSuccess(true);
                } else {
                    response.setId(null);
                    response.setSuccess(false);
                }
            } else {
                response.setId(null);
                response.setSuccess(false);
            }
        } else {
            response.setId(null);
            response.setSuccess(false);
        }

        return response;
    }
    
    @Autowired
    private EmployeeRepository employeeRepository;

    public EmployeeByJobResponse getEmployeesByJobId(Integer jobId) {
        EmployeeByJobResponse response = new EmployeeByJobResponse();

        // Consulta los empleados por el ID del trabajo
        List<Employee> employees = employeeRepository.findByJobId(jobId);

        if (!employees.isEmpty()) {
            List<EmployeeResponse> employeeResponses = new ArrayList<>();

            for (Employee employee : employees) {
                EmployeeResponse employeeResponse = new EmployeeResponse();
                // Mapea los datos del empleado al objeto EmployeeResponse
                employeeResponse.setId(employee.getId());
                employeeResponse.setName(employee.getName());
                employeeResponse.setLastName(employee.getLastName());
                employeeResponse.setBirthdate(employee.getBirthdate());
                // ... mapea otros campos

                employeeResponses.add(employeeResponse);
            }

            response.setEmployees(employeeResponses);
            response.setSuccess(true);
        } else {
            response.setEmployees(Collections.emptyList());
            response.setSuccess(false);
        }

        return response;
    }
}
